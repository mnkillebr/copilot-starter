// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginLoginAccessTokenPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UserRead = {
    email: string;
    is_active?: boolean;
    is_admin?: boolean;
    full_name?: string | null;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: string | null;
};

export type UserUpdate = {
    email?: string | null;
    is_active?: boolean;
    is_admin?: boolean;
    full_name?: string | null;
    password?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type MakeHandlerCopilotkitPathOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/copilotkit/{path}';
};

export type MakeHandlerCopilotkitPathOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MakeHandlerCopilotkitPathOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/copilotkit/{path}';
};

export type MakeHandlerCopilotkitPathOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MakeHandlerCopilotkitPathOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/copilotkit/{path}';
};

export type MakeHandlerCopilotkitPathOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MakeHandlerCopilotkitPathOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/copilotkit/{path}';
};

export type MakeHandlerCopilotkitPathOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MakeHandlerCopilotkitPathOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/copilotkit/{path}';
};

export type MakeHandlerCopilotkitPathOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginLoginAccessTokenPostData = {
    body: BodyLoginLoginAccessTokenPost;
    path?: never;
    query?: never;
    url: '/login/access-token';
};

export type LoginLoginAccessTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenPostError = LoginLoginAccessTokenPostErrors[keyof LoginLoginAccessTokenPostErrors];

export type LoginLoginAccessTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenPostResponse = LoginLoginAccessTokenPostResponses[keyof LoginLoginAccessTokenPostResponses];

export type RegisterUsersRegisterPostData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/users/register';
};

export type RegisterUsersRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUsersRegisterPostError = RegisterUsersRegisterPostErrors[keyof RegisterUsersRegisterPostErrors];

export type RegisterUsersRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type RegisterUsersRegisterPostResponse = RegisterUsersRegisterPostResponses[keyof RegisterUsersRegisterPostResponses];

export type ReadUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type ReadUsersUsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserRead>;
};

export type ReadUsersUsersGetResponse = ReadUsersUsersGetResponses[keyof ReadUsersUsersGetResponses];

export type ReadCurrentUserUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type ReadCurrentUserUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type ReadCurrentUserUsersMeGetResponse = ReadCurrentUserUsersMeGetResponses[keyof ReadCurrentUserUsersMeGetResponses];

export type DeleteUserUsersUserIdDeleteData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserUsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUsersUserIdDeleteError = DeleteUserUsersUserIdDeleteErrors[keyof DeleteUserUsersUserIdDeleteErrors];

export type DeleteUserUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserUsersUserIdDeleteResponse = DeleteUserUsersUserIdDeleteResponses[keyof DeleteUserUsersUserIdDeleteResponses];

export type ReadUserUsersUserIdGetData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type ReadUserUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUserUsersUserIdGetError = ReadUserUsersUserIdGetErrors[keyof ReadUserUsersUserIdGetErrors];

export type ReadUserUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type ReadUserUsersUserIdGetResponse = ReadUserUsersUserIdGetResponses[keyof ReadUserUsersUserIdGetResponses];

export type UpdateUserUsersUserIdPutData = {
    body: UserUpdate;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UpdateUserUsersUserIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserUsersUserIdPutError = UpdateUserUsersUserIdPutErrors[keyof UpdateUserUsersUserIdPutErrors];

export type UpdateUserUsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UpdateUserUsersUserIdPutResponse = UpdateUserUsersUserIdPutResponses[keyof UpdateUserUsersUserIdPutResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://openapi.json` | (string & {});
};