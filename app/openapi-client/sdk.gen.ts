// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-next';
import type { MakeHandlerCopilotkitPathOptionsData, LoginLoginAccessTokenPostData, LoginLoginAccessTokenPostResponse, LoginLoginAccessTokenPostError, RegisterUsersRegisterPostData, RegisterUsersRegisterPostResponse, RegisterUsersRegisterPostError, ReadUsersUsersGetData, ReadUsersUsersGetResponse, ReadCurrentUserUsersMeGetData, ReadCurrentUserUsersMeGetResponse, DeleteUserUsersUserIdDeleteData, DeleteUserUsersUserIdDeleteResponse, DeleteUserUsersUserIdDeleteError, ReadUserUsersUserIdGetData, ReadUserUsersUserIdGetResponse, ReadUserUsersUserIdGetError, UpdateUserUsersUserIdPutData, UpdateUserUsersUserIdPutResponse, UpdateUserUsersUserIdPutError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Make Handler
 */
export const makeHandlerCopilotkitPathOptionsDelete = <ThrowOnError extends boolean = false>(options?: Options<MakeHandlerCopilotkitPathOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/copilotkit/{path}',
        ...options
    });
};

/**
 * Make Handler
 */
export const makeHandlerCopilotkitPathOptionsGet = <ThrowOnError extends boolean = false>(options?: Options<MakeHandlerCopilotkitPathOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/copilotkit/{path}',
        ...options
    });
};

/**
 * Make Handler
 */
export const makeHandlerCopilotkitPathOptions = <ThrowOnError extends boolean = false>(options?: Options<MakeHandlerCopilotkitPathOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).options<unknown, unknown, ThrowOnError>({
        url: '/copilotkit/{path}',
        ...options
    });
};

/**
 * Make Handler
 */
export const makeHandlerCopilotkitPathOptionsPost = <ThrowOnError extends boolean = false>(options?: Options<MakeHandlerCopilotkitPathOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/copilotkit/{path}',
        ...options
    });
};

/**
 * Make Handler
 */
export const makeHandlerCopilotkitPathOptionsPut = <ThrowOnError extends boolean = false>(options?: Options<MakeHandlerCopilotkitPathOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/copilotkit/{path}',
        ...options
    });
};

/**
 * Login
 */
export const loginLoginAccessTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenPostResponse, LoginLoginAccessTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Register
 */
export const registerUsersRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUsersRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUsersRegisterPostResponse, RegisterUsersRegisterPostError, ThrowOnError>({
        url: '/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Users
 */
export const readUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersUsersGetResponse, unknown, ThrowOnError>({
        url: '/users/',
        ...options
    });
};

/**
 * Read Current User
 */
export const readCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCurrentUserUsersMeGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Delete User
 */
export const deleteUserUsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserUsersUserIdDeleteResponse, DeleteUserUsersUserIdDeleteError, ThrowOnError>({
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Read User
 */
export const readUserUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadUserUsersUserIdGetResponse, ReadUserUsersUserIdGetError, ThrowOnError>({
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserUsersUserIdPutResponse, UpdateUserUsersUserIdPutError, ThrowOnError>({
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};